apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .Release.Name }}-cronjob
  labels:
    {{- include "kapel.labels" . | nindent 4 }}
spec:
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 50
  failedJobsHistoryLimit: 10
  startingDeadlineSeconds: 1800
  schedule: {{ .Values.cronjob.schedule | quote }}
  jobTemplate:
    spec:
      # Allow up to 12 hours and 2 pod retries for job completion (should be less than cron frequency)
      activeDeadlineSeconds: 43200
      ttlSecondsAfterFinished: {{ .Values.cronjob.ttlSecondsAfterFinished }}
      backoffLimit: 2
      template:
        metadata:
          labels:
            app: kapel
        spec:
          {{- if .Values.cronjob.priorityClassName }}
          priorityClassName: {{ .Values.cronjob.priorityClassName }}
          {{- end }}
          # Allow up to 4 hours for pod completion
          activeDeadlineSeconds: 14400
          # If a container fails, fail the pod (job controller will make a fresh new pod)
          restartPolicy: Never
          securityContext:
            runAsNonRoot: true
            {{ if .Values.user.uid }}
            runAsUser: {{ .Values.user.uid }}
            {{ end }}
            {{ if .Values.user.gid }}
            runAsGroup: {{ .Values.user.gid }}
            fsGroup: {{ .Values.user.gid }}
            {{ end }}
          volumes:
            {{ if eq .Values.outputFormat "ssmsend" }}
            - name: ssmsend-config-volume
              configMap:
                name: {{ .Release.Name }}-ssmsend-config
            - name: ssmsend-secret-volume
              secret:
                secretName: {{ .Release.Name }}-ssmsend-secret
                defaultMode: 0400
            {{ end }}
            {{ if .Values.gridSecurityHostPath }}
            - name: grid-security-volume
              hostPath:
                path: /cvmfs/grid.cern.ch/etc/grid-security/certificates/
                type: Directory
            {{ end }}
            - name: data-volume
              emptyDir:
                sizeLimit: {{ .Values.dataVolumeSize }}
            - name: run-volume
              emptyDir:
                sizeLimit: 50M
            - name: manual-records
              configMap:
                name: {{ .Release.Name }}-manual-records
          initContainers:
            - name: processor
              image: {{ .Values.processor.image_repository }}:{{ .Values.processor.image_tag | default .Chart.Version }}
              imagePullPolicy: {{ .Values.processor.image_pull_policy }}
              workingDir: /src
              command: [ "python3" ]
              args: [ "KAPEL.py" ]
              resources:
                {{- toYaml .Values.processor.resources | nindent 16 }}
              env:
                # for pip installation
                - name: HOME
                  value: "/tmp/home"
                # ignore pip warnings
                - name: PIP_NO_WARN_SCRIPT_LOCATION
                  value: "0"
                # avoid wasting time on network connection for unnecessary version check warning
                - name: PIP_DISABLE_PIP_VERSION_CHECK
                  value: "1"
                # to see log output immediately
                - name: PYTHONUNBUFFERED
                  value: "TRUE"
                {{ if eq .Values.outputFormat "gratia" }}
                # Gratia needs individual job records rather than summaries
                - name: SUMMARIZE_RECORDS
                  value: "False"
                {{ end }}
                {{ if .Values.processor.prometheus_auth.secret }}
                - name: PROMETHEUS_AUTH_HEADER
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.processor.prometheus_auth.secret }}
                      key: {{ .Values.processor.prometheus_auth.key }}
                {{ end }}
              envFrom:
                - configMapRef:
                    name: {{ .Release.Name }}-processor-config
              volumeMounts:
                - name: data-volume
                  mountPath: /srv/kapel
                - name: manual-records
                  mountPath: /srv/manual
          containers:
          {{ if eq .Values.outputFormat "gratia" }}
            - name: gratia-output
              image: {{ .Values.gratia.image_repository}}:{{ .Values.gratia.image_tag | default .Chart.AppVersion }}
              workingDir: /gratia
              command: [ "python3" ]
              args: [ "kubernetes_meter.py" ]
              resources:
                {{- toYaml .Values.gratia.resources | nindent 16 }}
              envFrom:
                - configMapRef:
                    name: {{ .Release.Name }}-gratia-output-config
              volumeMounts:
                - name: data-volume
                  mountPath: /srv/kapel
          {{ else }}
            - name: ssmsend
              image: {{ .Values.ssmsend.image_repository }}:{{ .Values.ssmsend.image_tag | default .Chart.AppVersion }}
              resources:
                {{- toYaml .Values.ssmsend.resources | nindent 16 }}
              command: ["/bin/bash"]
              {{ if .Values.ssmsend.enabled }}
              args: ["-c", "mkdir $HOME; ssmsend -c /ssmsend-config/sender.cfg"]
              {{ else }}
              args: ["-c", "mkdir $HOME; echo 'ssmsend disabled'; sleep 3600"]
              {{ end }}
              env:
                # for openssl ~/.rnd
                - name: HOME
                  value: /tmp/home
              volumeMounts:
                - name: ssmsend-config-volume
                  mountPath: /ssmsend-config
                  readOnly: true
                - name: ssmsend-secret-volume
                  mountPath: /ssmsend-certs
                  readOnly: true
                {{ if .Values.gridSecurityHostPath }}
                - name: grid-security-volume
                  mountPath: /etc/grid-security/certificates
                  readOnly: true
                {{ end }}
                - name: data-volume
                  mountPath: /var/spool/apel/outgoing
                - name: run-volume
                  mountPath: /var/run/apel
          {{ end }}
